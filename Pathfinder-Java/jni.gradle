apply plugin: 'c'

def nativeDir = 'src/native'
def sharedArtifactDir = 'build/libs/pathfinderjava/shared/platform'
def exportDir = 'src/main/resources'
def armJNI = '../arm-linux'
if (project.hasProperty('armJNI')) armJNI = project.armJNI

ext.getPlatformPath = { binary ->
    if (binary.targetPlatform.architecture.arm) {
        return "Linux/arm"
    } else if (binary.targetPlatform.operatingSystem.linux) {
        if (binary.targetPlatform.architecture.amd64) {
            return "Linux/amd64"
        } else {
            return "Linux/" + binary.targetPlatform.architecture.name
        }
    } else if (binary.targetPlatform.operatingSystem.windows) {
        if (binary.targetPlatform.architecture.amd64) {
            return "Win/amd64"
        } else {
            return "Win/" + binary.targetPlatform.architecture.name
        }
    } else if (binary.targetPlatform.operatingSystem.macOsX) {
        if (binary.targetPlatform.architecture.amd64) {
            return "Mac/x86_64"
        } else {
            return "Mac/" + binary.targetPlatform.architecture.name
        }
    } else {
        return binary.targetPlatform.operatingSystem.name + '/' + binary.targetPlatform.architecture.name
    }
}

model {
    components {
        pathfinderjava(NativeLibrarySpec) {
            targetPlatform 'roborio'
            targetPlatform 'any64'
            
            project.ext.binaries = []
            
            binaries.withType(SharedLibraryBinarySpec) { binary ->
                if (binary.targetPlatform.operatingSystem.isCurrent()) {
                    if (project.hasProperty("32") && !binary.targetPlatform.architecture.name.contains("64"))
                        project.ext.binaries << binary.sharedLibraryFile
                    else if (!project.hasProperty("32") && binary.targetPlatform.architecture.name.contains("64"))
                        project.ext.binaries << binary.sharedLibraryFile
                }
            }
            
            binaries.all {
                tasks.withType(CCompile) {
                    dependsOn jniHeaders
                    def javahome = org.gradle.internal.jvm.Jvm.current().javaHome
                    
                    if (toolChain in VisualCpp) {
                        cCompiler.args "-I${javahome}/include"
                        if (targetPlatform.operatingSystem.windows)
                            cCompiler.args "-I${javahome}/include/win32"
                        else if (targetPlatform.operatingSystem.macOsX)
                            cCompiler.args "-I${javahome}/include/darwin"
                        else if (targetPlatform.operatingSystem.linux)
                            cCompiler.args "-I${javahome}/include/linux"
                    } else {
                        cCompiler.args '-I', "${javahome}/include"
                        if (targetPlatform.operatingSystem.windows)
                            cCompiler.args '-I', "${javahome}/include/win32"
                        else if (targetPlatform.operatingSystem.macOsX)
                            cCompiler.args '-I', "${javahome}/include/darwin"
                        else if (targetPlatform.operatingSystem.linux)
                            cCompiler.args '-I', "${javahome}/include/linux"
                    }
                    
                    // cCompiler.args << '-L"' + javahome + '/lib"'
                    if (targetPlatform.architecture.name.contains('arm')) {
                        cCompiler.args '-I', new File(armJNI).absolutePath
                        cCompiler.args '-I', new File("${armJNI}/linux").absolutePath
                    }
                }
            }
            
            sources {
                c {
                    source {
                        srcDirs = ["$nativeDir/c"]
                        includes  = ['**/*.c']
                    }
                    exportedHeaders {
                        srcDirs = ["$nativeDir/include"]
                        jniHeaders.outputs.files.each { file ->
                            srcDirs file.getPath()
                        }
                    }
                    lib project: ':Pathfinder-Core', library: 'pathfinder', linkage: 'static'
                }
            }
        }
    }
}

task jniHeaders {
    description = "Generate JNI Headers from the PathfinderJNI"
    group = "Pathfinder"
    
    def outputFolder = file("$nativeDir/jni_headers")
    inputs.files sourceSets.main.output
    outputs.dir outputFolder
    
    doLast {
        outputFolder.mkdirs()
        exec {
            executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
            args '-d', outputFolder
            args '-cp', sourceSets.main.output.classesDir
            args 'jaci.pathfinder.PathfinderJNI'
        }
    }
}

task libraryExport {
    description = "Export Native Libraries to the resources/ directory of the Jar"
    group = "Pathfinder"
    
    doLast {
        copy {
            from sharedArtifactDir
            into exportDir
        }
    }
}

task install() {
    doLast {
        binaries.each { binary ->
            println "Installing Binary: " + binary
            installBinary(binary, file("$nativeDir/include"))
        }
    }
}

processResources.dependsOn libraryExport

task zipRoborioJni(type: Zip) {
    dependsOn 'build'

    from fileTree('build/libs/pathfinderjava/shared/roborio')

    baseName = "Pathfinder-JNI"
    classifier = "athena"
    destinationDir = new File(project.buildDir, "dist")
}

publishing {
    publications {
        pathfinder_jni(MavenPublication) {
            groupId 'jaci.pathfinder'
            artifactId 'Pathfinder-JNI'

            artifact zipRoborioJni {
                classifier 'athena'
            }
        }
    }
}